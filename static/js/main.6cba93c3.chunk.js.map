{"version":3,"sources":["svgs/swords.svg","svgs sync /^/.*/.svg$","svgs/Dedicated Transport.svg","svgs/Elites.svg","svgs/Fast Attack.svg","svgs/Flyer.svg","svgs/Fortification.svg","svgs/HQ.svg","svgs/Heavy Support.svg","svgs/Lord of War.svg","svgs/Troops.svg","constants/factions.js","reducers/listsSlice.js","reducers/unitsSlice.js","reducers/requisitionsSlice.js","reducers/pagesSlice.js","components/requisitionLog.jsx","components/forceHeader.jsx","constants/roles.js","constants/ranks.js","components/unitCard.jsx","components/unitListing.jsx","components/orderOfBattle.jsx","components/crusadeListDetails.jsx","components/frontPage.jsx","reducers/battlesSlice.js","constants/missions.js","components/battleSetup.jsx","components/battleUnitListing.jsx","components/battleResolution.jsx","components/battleHistoryListing.jsx","components/battleHistory.jsx","constants/help.js","App.js","reportWebVitals.js","configureStore.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","FACTIONS","value","text","listsAdapter","createEntityAdapter","initialState","getInitialState","listsSlice","createSlice","name","reducers","saveList","upsertOne","deleteList","removeOne","updateList","updateOne","actions","getSelectors","state","lists","selectLists","selectAll","selectListById","selectById","unitsAdapter","createSelector","list","unitsSlice","saveUnit","deleteUnit","deleteManyUnits","removeMany","updateUnit","units","selectUnits","selectUnitById","selectUnitsByList","unit","filter","selectFilteredUnitIds","filteredUnits","requisitionsAdapter","requisitionsSlice","saveRequisition","deleteRequisition","deleteManyRequisitions","requisitions","selectRequisitions","selectRequisitionsByList","requisition","pagesSlice","filteredReqs","page","editId","currentListId","battle","help","changePage","action","payload","editUnit","editList","resolveBattle","toggleHelp","style","paddingBottom","paddingTop","RequisitionLog","currentList","useSelector","pages","supplyLimit","reqList","useState","other","setOther","reqName","setReqName","unitName","setUnitName","cost","setCost","dispatch","useDispatch","Segment","Header","Container","textAlign","List","divided","Item","Content","floated","Icon","size","link","onClick","changes","deleteReq","Description","rewards","Button","content","uuid","parseInt","Form","onSubmit","preventDefault","Group","inline","Input","width","label","placeholder","onChange","target","type","ForceHeader","listId","listToEdit","battlesFought","battlesWon","unitList","requisitionSpent","reduce","total","requisitionRemaining","supplyTotal","power","crusadeTotal","cp","forceName","setForceName","playerName","setPlayerName","faction","setFaction","notes","setNotes","reqExpanded","setReqExpanded","colour","useEffect","Grid","stackable","padded","Row","columns","stretched","Column","Select","clearable","options","Statistic","widths","Label","Value","color","Message","warning","attached","centered","TextArea","ROLES","getRank","xp","rank","UnitCard","unitId","newId","unitToEdit","setName","role","setRole","setType","psyker","setPsyker","character","setCharacter","specialist","setSpecialist","equipment","setEquipment","keywords","setKeywords","psychic","setPsychic","trait","setTrait","relic","setRelic","others","setOthers","setPower","models","setModels","setXp","setCp","bh","setBh","bs","setBs","battlesSurvived","enemiesDestroyed","pop","setPop","addReq","reqTyp","reqCheck","handleSubmit","returnToMain","fluid","min","readOnly","Checkbox","checked","compact","negative","Popup","open","hideOnScroll","trigger","positive","UnitListing","expanded","setExpanded","setWarning","image","require","default","Card","raised","Image","src","alt","title","Meta","Detail","extra","icon","copiedUnit","position","on","Modal","onActionClick","onOpen","onClose","closeOnDocumentClick","closeIcon","scrolling","wrapped","Actions","OrderOfBattle","unitIds","suffix","length","itemsPerRow","CrusadeListDetails","FrontPage","forcesList","newList","battlesAdapter","battlesSlice","saveBattle","deleteBattle","deleteManyBattles","battles","selectBattles","selectBattleById","selectBattlesByList","MISSIONS","filteredBattles","combatPatrol","reward","incursion","strikeForce","onslaught","BATTLESIZE","DEFENDER","BattleSetup","allLists","allUnits","playerOneListName","setPlayerOneListName","playerOneListId","setPlayerOneListId","playerOneSelectedUnits","setPlayerOneSelectedUnits","playerOneVP","setPlayerOneVP","playerOneBattles","setPlayerOneBattles","playerOneWins","setPlayerOneWins","playerOneReq","setPlayerOneReq","playerTwoListId","setPlayerTwoListId","playerTwoListName","setPlayerTwoListName","playerTwoSelectedUnits","setPlayerTwoSelectedUnits","playerTwoVP","setPlayerTwoVP","playerTwoBattles","setPlayerTwoBattles","playerTwoWins","setPlayerTwoWins","playerTwoReq","setPlayerTwoReq","playerTwoTracked","setPlayerTwoTracked","defender","setDefender","gameNotes","setGameNotes","mission","setMission","battleSize","setBattleSize","battleDate","setBattleDate","battleName","setBattleName","noUnits","setNoUnits","find","playerOnePowerTotal","playerTwoPowerTotal","winner","playerOneOptions","push","wins","key","subheader","playerTwoOptions","playerOneUnits","playerTwoUnits","reqRewardCheck","recordBattle","supplyRewards","onDismiss","required","Radio","toggle","playerTwoToggle","setPlayer","setOpponent","changeBattleSize","className","Subheader","as","toKeep","checkPlayerOneUnits","checkPlayerTwoUnits","max","UnitBattleListing","xpGain","setXPGain","newEnemies","setNewEnemies","destroyed","setDestroyed","marked","setMarked","visible","setVisible","enemyXP","Math","floor","calculateXPGain","totalXPGain","BattleResolution","battleId","currentBattle","BattleHistoryListing","playerOneList","playerTwoList","verticalAlign","startCase","BattleHistory","HELP","App","navTo","inverted","Accordion","styled","Title","active","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","reducer","devTools","middleware","getDefaultMiddleware","concat","thunk","persistor","persistStore","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6cba93c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/swords.476334db.svg\";","var map = {\n\t\"./Dedicated Transport.svg\": 170,\n\t\"./Elites.svg\": 171,\n\t\"./Fast Attack.svg\": 172,\n\t\"./Flyer.svg\": 173,\n\t\"./Fortification.svg\": 174,\n\t\"./HQ.svg\": 175,\n\t\"./Heavy Support.svg\": 176,\n\t\"./Lord of War.svg\": 177,\n\t\"./Troops.svg\": 178,\n\t\"./swords.svg\": 135\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 169;","export default __webpack_public_path__ + \"static/media/Dedicated Transport.5102f531.svg\";","export default __webpack_public_path__ + \"static/media/Elites.331fe7fa.svg\";","export default __webpack_public_path__ + \"static/media/Fast Attack.c7ad68aa.svg\";","export default __webpack_public_path__ + \"static/media/Flyer.a877c2eb.svg\";","export default __webpack_public_path__ + \"static/media/Fortification.4bd10408.svg\";","export default __webpack_public_path__ + \"static/media/HQ.f47f328b.svg\";","export default __webpack_public_path__ + \"static/media/Heavy Support.bdc82124.svg\";","export default __webpack_public_path__ + \"static/media/Lord of War.d4c85038.svg\";","export default __webpack_public_path__ + \"static/media/Troops.f345a6fd.svg\";","const FACTIONS = [\r\n  { value: \"Imperium\", text: \"Imperium\" },\r\n  { value: \"Chaos\", text: \"Chaos\" },\r\n  { value: \"Aeldari\", text: \"Aeldari\" },\r\n  { value: \"Tyranids\", text: \"Tyranids\" },\r\n  { value: \"Orks\", text: \"Orks\" },\r\n  { value: \"Necrons\", text: \"Necrons\" },\r\n  { value: \"T'au Empire\", text: \"T'au Empire\" },\r\n]\r\n\r\nexport default FACTIONS;","import { createSlice, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\r\n\r\nconst listsAdapter = createEntityAdapter();\r\n\r\nconst initialState = listsAdapter.getInitialState();\r\n\r\nconst listsSlice = createSlice({\r\n  name: 'lists',\r\n  initialState,\r\n  reducers: {\r\n    saveList: listsAdapter.upsertOne,\r\n    deleteList: listsAdapter.removeOne,\r\n    updateList: listsAdapter.updateOne,\r\n  }\r\n})\r\n\r\nexport const { saveList, deleteList, updateList } = listsSlice.actions;\r\n\r\nexport default listsSlice.reducer;\r\n\r\nexport const { selectAll: selectLists, selectById: selectListById, } = listsAdapter.getSelectors((state) => state.lists)\r\nexport const selectListIds = createSelector(\r\n  selectLists, (lists) => lists.map((list) => list.id)\r\n);\r\n\r\n","import { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\r\nimport { selectListById } from './listsSlice';\r\n\r\n\r\nconst unitsAdapter = createEntityAdapter();\r\n\r\nconst initialState = unitsAdapter.getInitialState();\r\n\r\nconst unitsSlice = createSlice({\r\n  name: 'units',\r\n  initialState,\r\n  reducers: {\r\n    saveUnit: unitsAdapter.upsertOne,\r\n    deleteUnit: unitsAdapter.removeOne,\r\n    deleteManyUnits: unitsAdapter.removeMany,\r\n    updateUnit: unitsAdapter.updateOne,\r\n  }\r\n})\r\n\r\nexport const { saveUnit, deleteUnit, deleteManyUnits, updateUnit } = unitsSlice.actions;\r\n\r\nexport default unitsSlice.reducer;\r\n\r\nexport const { selectAll: selectUnits, selectById: selectUnitById, } = unitsAdapter.getSelectors((state) => state.units);\r\nexport const selectUnitIds = createSelector(\r\n  selectUnits, (units) => units.map((unit) => unit.id)\r\n);\r\n\r\nexport const selectUnitsByList = createSelector(\r\n  selectUnits, selectListById, (units, list) => { return units.filter((unit) => unit.list === list.id)}\r\n);\r\n\r\nexport const selectFilteredUnitIds = createSelector(\r\n  selectUnitsByList, (filteredUnits) => filteredUnits.map((unit) => unit.id)\r\n)","import { createSlice, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\r\nimport { selectListById } from './listsSlice';\r\n\r\nconst requisitionsAdapter = createEntityAdapter();\r\n\r\nconst initialState = requisitionsAdapter.getInitialState();\r\n\r\nconst requisitionsSlice = createSlice({\r\n  name: 'requisitions',\r\n  initialState,\r\n  reducers: {\r\n    saveRequisition: requisitionsAdapter.upsertOne,\r\n    deleteRequisition: requisitionsAdapter.removeOne,\r\n    deleteManyRequisitions: requisitionsAdapter.removeMany,\r\n  }\r\n})\r\n\r\nexport const { saveRequisition, deleteRequisition, deleteManyRequisitions } = requisitionsSlice.actions;\r\n\r\nexport default requisitionsSlice.reducer;\r\n\r\nexport const { selectAll: selectRequisitions, selectById: selectRequisitionById, } = requisitionsAdapter.getSelectors((state) => state.requisitions)\r\nexport const selectrequisitionIds = createSelector(\r\n  selectRequisitions, (requisitions) => requisitions.map((requisition) => requisition.id)\r\n);\r\n\r\nexport const selectRequisitionsByList = createSelector(\r\n  selectRequisitions, selectListById, (req, list) => { return req.filter((req) => req.list === list.id)}\r\n);\r\n\r\nexport const selectFilteredRequisitionIds = createSelector(\r\n  selectRequisitionsByList, (filteredReqs) => filteredReqs.map((req) => req.id)\r\n)","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = { page: 'FRONT', editId: '', currentListId: '', battle: '', help: true };\r\n\r\nconst pagesSlice = createSlice({\r\n  name: 'pages',\r\n  initialState,\r\n  reducers: {\r\n    changePage(state, action) {\r\n      state.page = action.payload\r\n    },\r\n    editUnit(state, action) {\r\n      state.page = action.payload.page\r\n      state.editId = action.payload.editId\r\n    },\r\n    editList(state, action) {\r\n      state.page = action.payload.page\r\n      state.currentListId = action.payload.currentListId\r\n    },\r\n    resolveBattle(state, action) {\r\n      state.page = action.payload.page\r\n      state.battle = action.payload.battle\r\n    },\r\n    toggleHelp(state, action) {\r\n      state.help = !state.help\r\n    }\r\n  },\r\n});\r\n\r\nexport const { changePage, editUnit, editList, resolveBattle, toggleHelp } = pagesSlice.actions;\r\n\r\nexport default pagesSlice.reducer","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateList, selectListById } from '../reducers/listsSlice';\r\nimport { saveRequisition, deleteRequisition, selectRequisitionsByList } from '../reducers/requisitionsSlice';\r\nimport { List, Form, Segment, Header, Container, Icon, Button } from 'semantic-ui-react';\r\nimport { v4 as uuid } from 'uuid'\r\nconst style = {\r\n  paddingBottom: 10,\r\n  paddingTop: 10\r\n}\r\n\r\nconst RequisitionLog = () => {\r\n  const currentList = useSelector((state) => state.pages.currentListId)\r\n  const { supplyLimit } = useSelector((state) => selectListById(state, currentList))\r\n  const reqList = useSelector((state) => selectRequisitionsByList(state, currentList))\r\n  const [other, setOther] = useState(false)\r\n  const [reqName, setReqName] = useState('')\r\n  const [unitName, setUnitName] = useState('')\r\n  const [cost, setCost] = useState(0)\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  \r\n  const increaseSupply = () => {\r\n    const req = {\r\n      id: uuid(),\r\n      reqName: 'Increased Supply',\r\n      unitName: 'Crusade Force',\r\n      cost: 1,\r\n      list: currentList,\r\n    }\r\n    dispatch(updateList({ id: currentList, changes: { supplyLimit: supplyLimit + 5 } }))\r\n    dispatch(saveRequisition(req))\r\n  }\r\n  const increaseSupplyFree = () => {\r\n    const req = {\r\n      id: uuid(),\r\n      reqName: 'Increased Supply (Free)',\r\n      unitName: 'Crusade Force',\r\n      cost: 0,\r\n      list: currentList,\r\n    }\r\n    dispatch(updateList({ id: currentList, changes: { supplyLimit: supplyLimit + 5, rewards: parseInt(currentList.rewards) - 1 } }))\r\n    dispatch(saveRequisition(req))\r\n  }\r\n\r\n  const deleteReq = (req) => {\r\n    if (req.reqName === 'Increased Supply' || req.reqName === 'Increased Supply (Free)') {\r\n      dispatch(updateList({ id: currentList, changes: { supplyLimit: supplyLimit - 5 } }))\r\n    } dispatch(deleteRequisition(req.id))\r\n  }\r\n\r\n  const addReq = () => {\r\n    const req = {\r\n      id: uuid(),\r\n      reqName,\r\n      unitName: unitName ? unitName : 'None',\r\n      cost,\r\n      list: currentList,\r\n    }\r\n    dispatch(saveRequisition(req));\r\n    setOther(false);\r\n  }\r\n\r\n  return (\r\n    <Segment>\r\n      <Header>Requisition History</Header>\r\n      <Container text textAlign='left'>\r\n        <List divided style={style}>\r\n          {reqList.map((req) =>\r\n            <List.Item key={req.id} id={req.id}>\r\n              <List.Content floated='right'>\r\n                <Icon size='large' name='cancel' link onClick={() => deleteReq(req)} />\r\n              </List.Content>\r\n              <List.Content>\r\n                <List.Header>{req.reqName} for {req.unitName}</List.Header>\r\n                <List.Description>Cost: {req.cost} RP</List.Description>\r\n              </List.Content>\r\n            </List.Item>)}\r\n        </List>\r\n      </Container>\r\n        {currentList.rewards > 0 ? <Button content='Claim Supply Reward' onClick={increaseSupplyFree} /> : <Button content='Increase Supply Limit' onClick={increaseSupply} />}\r\n        <Button content='Add Other Requisition' onClick={() => setOther(!other)} />\r\n      {other && <Form size='small' onSubmit={e => e.preventDefault()}>\r\n        <Form.Group style={style} inline>\r\n          <Form.Input width={6} label='Add New Requisition' placeholder='Requisition Name' onChange={e => setReqName(e.target.value)} />\r\n          <Form.Input width={6} label='Unit Name' placeholder='if required' onChange={e => setUnitName(e.target.value)} />\r\n          <Form.Input width={2} label='Cost' onChange={e => setCost(e.target.value)} type='number' />\r\n          <Form.Button onClick={addReq}>Add</Form.Button>\r\n        </Form.Group>\r\n      </Form>}\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default RequisitionLog;","import React, { useEffect, useState } from 'react';\r\nimport { Form, Segment, Grid, Message, Button, Statistic } from 'semantic-ui-react';\r\nimport FACTIONS from '../constants/factions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectUnitsByList } from '../reducers/unitsSlice';\r\nimport { saveList, selectListById } from '../reducers/listsSlice';\r\nimport { selectRequisitionsByList } from '../reducers/requisitionsSlice';\r\nimport { changePage } from '../reducers/pagesSlice';\r\nimport RequisitionLog from './requisitionLog';\r\n\r\n\r\n\r\nconst ForceHeader = ({ listId }) => {\r\n  const dispatch = useDispatch();\r\n  const listToEdit = useSelector((state) => selectListById(state, listId));\r\n  const { id, supplyLimit, requisition, battlesFought, battlesWon } = listToEdit;\r\n  const unitList = useSelector((state) => selectUnitsByList(state, listId));\r\n  const requisitionLog = useSelector((state) => selectRequisitionsByList(state, listId));\r\n  const requisitionSpent = requisitionLog.reduce((total, req) => total + parseInt(req.cost), 0);\r\n  const requisitionRemaining = requisition - requisitionSpent;  \r\n  const supplyTotal = unitList.reduce((total, unit) => total + parseInt(unit.power), 0);\r\n  const crusadeTotal = unitList.reduce((total, unit) => total + parseInt(unit.cp), 0);\r\n  const [forceName, setForceName] = useState(listToEdit.forceName);\r\n  const [playerName, setPlayerName] = useState(listToEdit.playerName);\r\n  const [faction, setFaction] = useState(listToEdit.faction);\r\n  const [notes, setNotes] = useState(listToEdit.notes);\r\n  const [reqExpanded, setReqExpanded] = useState(false)\r\n  const colour = supplyTotal > supplyLimit ? 'red' : 'black';\r\n\r\n  const returnToFront = () => {\r\n    dispatch(changePage('FRONT'))\r\n  };\r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    const savedList = {\r\n      id,\r\n      supplyLimit,\r\n      requisition,\r\n      battlesFought,\r\n      battlesWon,\r\n      forceName,\r\n      playerName,\r\n      faction,\r\n      supplyTotal,\r\n      crusadeTotal,\r\n      notes,    \r\n    };\r\n    dispatch(saveList(savedList))\r\n  }, [battlesFought, battlesWon, crusadeTotal, dispatch, faction, forceName, id, notes, playerName, requisition, supplyLimit, supplyTotal]);\r\n\r\n  return (\r\n    <>\r\n    <Segment>\r\n      <Grid stackable divided padded>\r\n        <Grid.Row columns={2} stretched>\r\n          <Grid.Column>\r\n            <Form>\r\n              <Form.Input\r\n                name=\"playerName\"\r\n                label='Player Name'\r\n                placeholder='Player Name'\r\n                value={playerName}\r\n                onChange={e => setPlayerName(e.target.value)} />\r\n              <Form.Input\r\n                name=\"forceName\"\r\n                label='Force Name'\r\n                placeholder='Force Name'\r\n                value={forceName}\r\n                onChange={e => setForceName(e.target.value)} />\r\n              <Form.Select\r\n                clearable\r\n                name='faction'\r\n                label='Crusade Faction'\r\n                options={FACTIONS}\r\n                placeholder='Select Faction'\r\n                value={faction}\r\n                onChange={(e, { value }) => setFaction(value)} />\r\n            </Form>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Statistic.Group size='tiny' widths='2'>\r\n              <Statistic>\r\n                <Statistic.Label>Battles Fought</Statistic.Label>\r\n                <Statistic.Value>{battlesFought}</Statistic.Value>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Label>Battles Won</Statistic.Label>\r\n                <Statistic.Value>{battlesWon}</Statistic.Value>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Label>Supply Limit</Statistic.Label>\r\n                <Statistic.Value>{supplyLimit}</Statistic.Value>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Label>Requisition Points</Statistic.Label>\r\n                <Statistic.Value>{requisitionRemaining}</Statistic.Value>\r\n              </Statistic>\r\n              <Statistic color={colour}>\r\n                <Statistic.Label>Supply Used</Statistic.Label>\r\n                <Statistic.Value>{supplyTotal}</Statistic.Value>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Label>Crusade Points</Statistic.Label>\r\n                <Statistic.Value>{crusadeTotal}</Statistic.Value>\r\n              </Statistic>\r\n            </Statistic.Group>\r\n            {supplyTotal > supplyLimit && <Message warning attached='bottom' content='You have exceeded your current supply limit' />}\r\n            {requisitionRemaining < 0 && <Message warning attached='bottom' content='You have spent too many Requisition Points.' />}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row centered columns='1'>\r\n          <Form>\r\n            <Form.TextArea\r\n              label='Crusade Goals, Information, and Notable Victories'\r\n              placeholder='Add narrative information, personal goals, notable battles, vendettas and grudges, or anything else here'\r\n              value={notes}\r\n              onChange={e => setNotes(e.target.value)} />\r\n          </Form>\r\n        </Grid.Row>\r\n        <Grid.Row centered >\r\n          <Button content='Force Selection' onClick={returnToFront} />\r\n          <Button content={reqExpanded ? 'Hide Requisition Log' : 'Show Requsition Log'} onClick={() => setReqExpanded(!reqExpanded)} />\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Segment>\r\n    {reqExpanded && <RequisitionLog />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ForceHeader;","const ROLES = [\r\n  {value: 'HQ', text: 'HQ'},\r\n  {value: 'Troops', text: 'Troops'},\r\n  {value: 'Elites', text: 'Elites'},\r\n  {value: 'Fast Attack', text: 'Fast Attack'},\r\n  {value: 'Flyer', text: 'Flyer'},\r\n  {value: 'Heavy Support', text: 'Heavy Support'},\r\n  {value: 'Fortification', text: 'Fortification'},\r\n  {value: 'Dedicated Transport', text: 'Dedicated Transport'},\r\n  {value: 'Lord of War', text: 'Lord of War'},\r\n]\r\n\r\nexport default ROLES;","const getRank = (xp) => {\r\n  let rank\r\n  switch (true) {\r\n    case (xp < 6):\r\n      rank = \"Battle-Ready\"\r\n      break;\r\n    case (xp < 16):\r\n      rank = \"Bloodied\"\r\n      break;\r\n    case (xp < 31):\r\n      rank = \"Battle-Hardened\"\r\n      break;\r\n    case (xp < 51):\r\n      rank = \"Heroic\"\r\n      break;\r\n    case (xp >= 51):\r\n      rank = \"Legendary\"\r\n      break;\r\n    default:\r\n      rank = null\r\n      break;\r\n  } return rank\r\n}\r\n\r\n\r\nexport default getRank","import React, { useState } from 'react';\r\nimport { Form, Button, Grid, Segment, Popup, Message } from 'semantic-ui-react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ROLES from '../constants/roles';\r\nimport { saveUnit } from '../reducers/unitsSlice';\r\nimport { changePage } from '../reducers/pagesSlice';\r\nimport { selectUnitById } from '../reducers/unitsSlice';\r\nimport { saveRequisition } from '../reducers/requisitionsSlice'\r\nimport getRank from '../constants/ranks';\r\n\r\nconst UnitCard = ({ unitId }) => {\r\n  const list = useSelector((state) => state.pages.currentListId)\r\n  const newId = uuid()\r\n  const unitToEdit = useSelector((state) => selectUnitById(state, unitId))\r\n  const id = unitId ? unitToEdit.id : newId\r\n  const [name, setName] = useState(unitId ? unitToEdit.name : '')\r\n  const [role, setRole] = useState(unitId ? unitToEdit.role : '')\r\n  const [type, setType] = useState(unitId ? unitToEdit.type : '')\r\n  const [psyker, setPsyker] = useState(unitId ? unitToEdit.psyker : false)\r\n  const [character, setCharacter] = useState(unitId ? unitToEdit.character : false)\r\n  const [specialist, setSpecialist] = useState(unitId ? unitToEdit.specialist : false)\r\n  const [equipment, setEquipment] = useState(unitId ? unitToEdit.equipment : '')\r\n  const [keywords, setKeywords] = useState(unitId ? unitToEdit.keywords : '')\r\n  const [psychic, setPsychic] = useState(unitId ? unitToEdit.psychic : '')\r\n  const [trait, setTrait] = useState(unitId ? unitToEdit.trait : '')\r\n  const [relic, setRelic] = useState(unitId ? unitToEdit.relic : '')\r\n  const [others, setOthers] = useState(unitId ? unitToEdit.others : '')\r\n  const [power, setPower] = useState(unitId ? unitToEdit.power : 0)\r\n  const [models, setModels] = useState(unitId ? unitToEdit.models : 0)\r\n  const [xp, setXp] = useState(unitId ? unitToEdit.xp : 0)\r\n  const [cp, setCp] = useState(unitId ? unitToEdit.cp : 0)\r\n  const [bh, setBh] = useState(unitId ? unitToEdit.bh : '')\r\n  const [bs, setBs] = useState(unitId ? unitToEdit.bs : '')\r\n  const [notes, setNotes] = useState(unitId ? unitToEdit.notes : '')\r\n  const battlesFought = unitId ? unitToEdit.battlesFought : 0\r\n  const battlesSurvived = unitId ? unitToEdit.battlesSurvived : 0\r\n  const enemiesDestroyed = unitId ? unitToEdit.enemiesDestroyed : 0\r\n  const [pop, setPop] = useState(false)\r\n  const dispatch = useDispatch()\r\n\r\n  const clearAll = () => {\r\n    setName('')\r\n    setRole('')\r\n    setTrait('')\r\n    setType('')\r\n    setEquipment('')\r\n    setKeywords('')\r\n    setRelic('')\r\n    setBh('')\r\n    setBs('')\r\n    setNotes('')\r\n    setCp(0)\r\n    setXp(0)\r\n    setPower(0)\r\n    setPsychic('')\r\n    setOthers('')\r\n    setPsyker(false)\r\n    setCharacter(false)\r\n    setModels(0)\r\n  }\r\n\r\n\r\n  const checkCompleted = () => {\r\n    if (name === '' || role === '' || power === '' || power === 0 || power === '0') {\r\n      setPop(true)\r\n    } else if (unitId) {\r\n      handleSubmit() \r\n    } else {\r\n      reqCheck()\r\n    }\r\n  }\r\n\r\n\r\n  const addReq = (reqName, value) => {\r\n    const req = {\r\n      id: uuid(),\r\n      reqTyp: reqName,\r\n      cost: value,\r\n      unit: name,\r\n      list: list\r\n    }\r\n    dispatch(saveRequisition(req))\r\n  } \r\n\r\n  const reqCheck = () => {\r\n      if (relic) {\r\n      addReq('Relic', 1)\r\n    } if (trait) {\r\n      addReq('Warlord Trait', 1)\r\n    } if (specialist) {\r\n      addReq('Specialist Reinforcements', 1)\r\n    }\r\n    handleSubmit()\r\n  }\r\n\r\n  const returnToMain = () => {\r\n    dispatch(changePage('MAIN'))\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    const unit = {\r\n      id,\r\n      name,\r\n      role,\r\n      type,\r\n      equipment,\r\n      psychic,\r\n      trait,\r\n      relic,\r\n      others,\r\n      power,\r\n      xp,\r\n      cp: relic && trait ? parseInt(cp) + 2 : relic || trait ? parseInt(cp) + 1 : cp,\r\n      bs,\r\n      bh,\r\n      notes,\r\n      list,\r\n      models,\r\n      keywords,\r\n      psyker,\r\n      character,\r\n      specialist,\r\n      battlesFought,\r\n      battlesSurvived,\r\n      enemiesDestroyed,\r\n    }\r\n    dispatch(saveUnit(unit))\r\n    returnToMain()\r\n  }\r\n\r\n  return (\r\n    <Segment>\r\n      <Form onSubmit={e => e.preventDefault()}>\r\n        <Grid stackable padded>\r\n          <Grid.Row columns={2}>\r\n            <Grid.Column>\r\n              <Form.Input\r\n                fluid\r\n                label='Unit Name'\r\n                placeholder='Unit Name'\r\n                name='name'\r\n                value={name}\r\n                onChange={e => setName(e.target.value)} />\r\n              <Form.Input\r\n                fluid\r\n                label='Unit Type'\r\n                placeholder='Unit Type'\r\n                name='type'\r\n                value={type}\r\n                onChange={e => setType(e.target.value)} />\r\n              <Form.Select\r\n                fluid\r\n                clearable\r\n                name='role'\r\n                label='Unit Role'\r\n                options={ROLES}\r\n                value={role}\r\n                placeholder='Select unit role'\r\n                onChange={(e, { value }) => setRole(value)} />\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <Form.Group widths='equal'>\r\n                <Form.Input\r\n                  fluid\r\n                  label='Power Rating'\r\n                  type='number'\r\n                  min='0'\r\n                  name='power'\r\n                  value={power}\r\n                  onChange={e => setPower(e.target.value)} />\r\n                <Form.Input\r\n                  fluid\r\n                  label='Model Count'\r\n                  type='number'\r\n                  min='0'\r\n                  name='models'\r\n                  value={models}\r\n                  onChange={e => setModels(e.target.value)} />\r\n              </Form.Group>\r\n              <Form.Group widths='equal'>\r\n                <Form.Input\r\n                  fluid\r\n                  label='Crusade Points'\r\n                  type='number'\r\n                  name='cp'\r\n                  value={cp}\r\n                  onChange={e => setCp(e.target.value)} />\r\n                <Form.Input\r\n                  fluid\r\n                  label='Experience Points'\r\n                  type='number'\r\n                  min='0'\r\n                  name='xp'\r\n                  value={xp}\r\n                  onChange={e => setXp(e.target.value)} />\r\n              </Form.Group>\r\n              <Form.Input readOnly label='Rank' value={getRank(xp)}/>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row centered>\r\n            <Form.Group widths='equal'>\r\n              <Form.Checkbox checked={character} label='Character' onChange={(e, { checked }) => setCharacter(checked)} />\r\n              <Form.Checkbox checked={psyker} label='Psyker' onChange={(e, { checked }) => setPsyker(checked)} />\r\n              <Form.Checkbox checked={specialist} label='Specialist' onChange={(e, { checked }) => setSpecialist(checked)} />\r\n            </Form.Group>\r\n          </Grid.Row>\r\n          {specialist && <Grid.Row centered>\r\n            <Message color='orange' compact>Enter the Stratagem Cost in the Crusade Points field and the upgrades given in the Upgrades field. This will also cost 1 Requisition Point.</Message></Grid.Row>}\r\n          {character && <Grid.Row centered>\r\n            <Grid.Column textAlign='center'>\r\n              <Message color='orange' compact>Adding a Relic or Warlord Trait will cost 1 Requisition Point and add one Crusade Point each</Message>\r\n              <Form.Group widths='equal'>\r\n                <Form.Input\r\n                  fluid\r\n                  label='Warlord Trait'\r\n                  name='trait'\r\n                  placeholder='Add Warlord Trait'\r\n                  onChange={e => setTrait(e.target.value)}\r\n                  value={trait} />\r\n                <Form.Input\r\n                  fluid\r\n                  label='Relic'\r\n                  name='relic'\r\n                  placeholder='Add Relic'\r\n                  onChange={e => setRelic(e.target.value)}\r\n                  value={relic} />\r\n              </Form.Group>\r\n            </Grid.Column>\r\n          </Grid.Row>}\r\n          <Grid.Row>\r\n            <Grid.Column>\r\n              <Form.Group widths='equal'>\r\n                {psyker && <Form.TextArea\r\n                  fluid='true'\r\n                  label='Psychic Powers'\r\n                  name='psychic'\r\n                  placeholder='Add Psychic Powers'\r\n                  onChange={e => setPsychic(e.target.value)}\r\n                  value={psychic} />}\r\n                <Form.TextArea\r\n                  fluid='true'\r\n                  label='Equipment'\r\n                  name='equipment'\r\n                  placeholder='Add Equipment'\r\n                  onChange={e => setEquipment(e.target.value)}\r\n                  value={equipment} />\r\n                <Form.TextArea\r\n                  fluid='true'\r\n                  label='Selectable Keywords'\r\n                  name='keywords'\r\n                  placeholder='Add Selectable Keywords'\r\n                  onChange={e => setKeywords(e.target.value)}\r\n                  value={keywords} />\r\n                <Form.TextArea\r\n                  fluid='true'\r\n                  label='Other Upgrades and Abilities'\r\n                  name='others'\r\n                  placeholder='Add Others'\r\n                  onChange={e => setOthers(e.target.value)}\r\n                  value={others} />\r\n              </Form.Group>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row columns='2' centered>\r\n            <Form.Group widths='equal'>\r\n              <Form.TextArea\r\n                label='Battle Honours'\r\n                name='bh'\r\n                placeholder='Add Battle Honours'\r\n                onChange={e => setBh(e.target.value)}\r\n                value={bh} />\r\n              <Form.TextArea\r\n                label='Battle Scars'\r\n                name='bs'\r\n                placeholder='Add Battle Scars'\r\n                onChange={e => setBs(e.target.value)}\r\n                value={bs} />\r\n            </Form.Group>\r\n          </Grid.Row>\r\n          <Grid.Row centered columns='1'>\r\n            <Form.TextArea\r\n              fluid='true'\r\n              label='Notes and History'\r\n              name='notes'\r\n              placeholder='Add Notes, Achievements, History, and anything else you want to record here'\r\n              onChange={e => setNotes(e.target.value)}\r\n              value={notes} />\r\n          </Grid.Row>\r\n          <Grid.Row centered>\r\n            <Button onClick={returnToMain}>Back</Button>\r\n            <Button negative onClick={clearAll}>Clear All</Button>\r\n            <Popup\r\n              content='Please ensure that your unit has at least a name, role, and power rating.'\r\n              open={pop}\r\n              hideOnScroll\r\n              trigger={<Button positive onClick={checkCompleted}>{unitId ? 'Save Unit' : 'Add Unit'}</Button>} />\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Form>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default UnitCard;","import React, { useState } from 'react';\r\nimport { Button, Popup, Card, Label, Image, List, Modal, Grid } from 'semantic-ui-react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { saveUnit, deleteUnit, selectUnitById } from '../reducers/unitsSlice';\r\nimport { editUnit } from '../reducers/pagesSlice';\r\nimport { v4 as uuid } from 'uuid';\r\nimport getRank from '../constants/ranks';\r\n\r\nconst UnitListing = ({ id }) => {\r\n  const unit = useSelector((state) => selectUnitById(state, id))\r\n  const { name, power, cp, type, role, character, psyker } = unit\r\n  const rank = getRank(unit.xp)\r\n  const [expanded, setExpanded] = useState(false)\r\n  const [warning, setWarning] = useState(false)\r\n  const image = require(`../svgs/${role}.svg`).default\r\n  const dispatch = useDispatch();\r\n  const handleDelete = () => {\r\n    dispatch(deleteUnit(unit.id))\r\n  }\r\n  const editPage = () => {\r\n    dispatch(editUnit({ page: 'EDIT', editId: unit.id }))\r\n  }\r\n\r\n  const duplicateUnit = () => {\r\n    const copiedUnit = { ...unit, id: uuid() }\r\n    if (unit.relic || unit.trait || unit.specialist) {\r\n      setWarning(true)\r\n    } else {\r\n      dispatch(saveUnit(copiedUnit))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card raised>\r\n      <Card.Content>\r\n        <Image size='mini' floated='right' src={image} alt='Unit Role Image' title={role} />\r\n        <Card.Header textAlign='left'>{name}</Card.Header>\r\n        <Card.Meta textAlign='left'>{type}</Card.Meta>\r\n      </Card.Content>\r\n      <Card.Content>\r\n        <Card.Description textAlign='left'>\r\n          <List>\r\n            {character && <List.Item><Label>Character</Label></List.Item>}\r\n            {psyker && <List.Item><Label>Psyker</Label></List.Item>}\r\n            {unit.specialist && <List.Item><Label>Specialist Reinforcements</Label></List.Item>}\r\n            <List.Item>\r\n              <Label>Power Rating:\r\n                <Label.Detail>{power}</Label.Detail>\r\n              </Label>\r\n            </List.Item>\r\n            <List.Item>\r\n              <Label>Crusade Points:\r\n                <Label.Detail>{cp}</Label.Detail>\r\n              </Label>\r\n            </List.Item>\r\n            <List.Item>\r\n              <Label>Rank:\r\n                <Label.Detail>{rank}</Label.Detail>\r\n              </Label>\r\n            </List.Item>\r\n          </List>\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Card.Description>\r\n          <Button.Group>\r\n            <Button icon='expand' onClick={() => setExpanded(true)} />\r\n            <Button icon='edit' onClick={editPage} />\r\n            <Button icon='clone' onClick={duplicateUnit} />\r\n            <Popup\r\n              size='tiny'\r\n              position='top center'\r\n              on='click'\r\n              content={<Button size='small' compact negative onClick={handleDelete}>Confirm Delete</Button>}\r\n              trigger={<Button negative icon='delete' />} />\r\n          </Button.Group>\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Modal size='tiny' open={warning} content='You cannot duplicate a unit with a Relic, Warlord Trait, or Specialist Reinforcements' actions={['OK']} onActionClick={() => setWarning(false)} onOpen={() => setWarning(true)} onClose={() => setWarning(false)} closeOnDocumentClick={true} />\r\n      <Modal open={expanded} closeIcon onActionClick={() => setExpanded(false)} onOpen={() => setExpanded(true)} onClose={() => setExpanded(false)} closeOnDocumentClick={true}>\r\n        <Modal.Header>{name}</Modal.Header>\r\n        <Modal.Content image scrolling>\r\n          <Image src={image} size='small' wrapped />\r\n          <Modal.Description>\r\n            <Grid stackable>\r\n              <Grid.Row columns={2} divided>\r\n                <Grid.Column>\r\n              <List divided size='large'>\r\n                <List.Item>\r\n                  <List.Header>Unit Type</List.Header>\r\n                  <List.Description>{type}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Unit Role</List.Header>\r\n                  <List.Description>{role}</List.Description>\r\n                </List.Item>\r\n                {character && <List.Item>\r\n                  <List.Header>Character</List.Header>\r\n                  <List.Description>This unit is a Character</List.Description>\r\n                </List.Item>}\r\n                {unit.trait && <List.Item>\r\n                  <List.Header>Warlord Trait</List.Header>\r\n                  <List.Description>{unit.trait}</List.Description>\r\n                </List.Item>}\r\n                {unit.relic && <List.Item>\r\n                  <List.Header>Relics</List.Header>\r\n                  <List.Description>{unit.relic}</List.Description>\r\n                </List.Item>}\r\n                {psyker && <List.Item>\r\n                  <List.Header>Psyker</List.Header>\r\n                  <List.Description>This unit is a Psyker</List.Description>\r\n                </List.Item>}\r\n                <List.Item>\r\n                  <List.Header>Power Rating</List.Header>\r\n                  <List.Description>{power}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Model Count</List.Header>\r\n                  <List.Description>{unit.models}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Crusade Points</List.Header>\r\n                  <List.Description>{cp}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Experience Points</List.Header>\r\n                  <List.Description>{unit.xp}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Unit Rank</List.Header>\r\n                  <List.Description>{rank}</List.Description>\r\n                </List.Item>\r\n              </List>\r\n              </Grid.Column>\r\n              <Grid.Column>\r\n              <List divided size='large'>\r\n                <List.Item>\r\n                  <List.Header>Keywords</List.Header>\r\n                  <List.Description>{unit.keywords}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Equipment</List.Header>\r\n                  <List.Description>{unit.equipment}</List.Description>\r\n                </List.Item>\r\n                {psyker && <List.Item>\r\n                  <List.Header>Psychic Powers</List.Header>\r\n                  <List.Description>{unit.psychic}</List.Description>\r\n                </List.Item>}\r\n                <List.Item>\r\n                  <List.Header>Upgrades and Abilities</List.Header>\r\n                  <List.Description>{unit.others}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Battles Fought</List.Header>\r\n                  <List.Description>{unit.battlesFought}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Battles Survived</List.Header>\r\n                  <List.Description>{unit.battlesSurvived}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Enemies Destroyed</List.Header>\r\n                  <List.Description>{unit.enemiesDestroyed}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Battle Honours</List.Header>\r\n                  <List.Description>{unit.bh ? unit.bh : 'None'}</List.Description>\r\n                </List.Item>\r\n                <List.Item>\r\n                  <List.Header>Battle Scars</List.Header>\r\n                  <List.Description>{unit.bs ? unit.bs : 'None'}</List.Description>\r\n                </List.Item>\r\n                {unit.specialist && <List.Item>\r\n                  <List.Header>Specialist Reinforcements</List.Header>\r\n                  <List.Description>This unit has been given Specialist Reinforcements</List.Description>\r\n                </List.Item>}\r\n                {unit.notes && <List.Item>\r\n                  <List.Header>Notes</List.Header>\r\n                  <List.Description>{unit.notes}</List.Description>\r\n                </List.Item>}\r\n              </List>\r\n              </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Modal.Description>\r\n        </Modal.Content>\r\n        <Modal.Actions><Button content='Close' onClick={() => setExpanded(false)} /></Modal.Actions>\r\n      </Modal>\r\n    </Card>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nexport default UnitListing;","import React from 'react';\r\nimport { Segment, Header, Button, Card } from 'semantic-ui-react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport UnitListing from './unitListing';\r\nimport { changePage } from '../reducers/pagesSlice';\r\nimport { selectFilteredUnitIds } from '../reducers/unitsSlice';\r\nconst style = {\r\n  paddingBottom: 10\r\n}\r\n\r\n\r\nconst OrderOfBattle = () => {\r\n  const dispatch = useDispatch();\r\n  const pageChange = () => {\r\n    dispatch(changePage('ADD'))\r\n  }\r\n  const listId = useSelector((state) => state.pages.currentListId)\r\n  const unitIds = useSelector((state) => selectFilteredUnitIds(state, listId))\r\n  const suffix = unitIds.length === 1 ? '' : 's';\r\n  return (\r\n      <Segment>\r\n        <Header>Crusade Cards ({unitIds.length} Unit{suffix})</Header>\r\n        {unitIds.length > 0 && <Card.Group style={style} stackable itemsPerRow='4'>\r\n          {unitIds.map((unit) => <UnitListing key={unit} id={unit} />)}\r\n        </Card.Group>}\r\n        <Button onClick={pageChange} content='Add New Unit' />\r\n      </Segment>\r\n  );\r\n}\r\n\r\n\r\nexport default OrderOfBattle;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Card, Button, Label, Popup, List } from 'semantic-ui-react';\r\nimport { selectListById, deleteList } from '../reducers/listsSlice';\r\nimport { deleteManyUnits, selectFilteredUnitIds } from '../reducers/unitsSlice';\r\nimport { editList } from '../reducers/pagesSlice';\r\n\r\nconst CrusadeListDetails = ({ listId }) => {\r\n  const list = useSelector((state) => selectListById(state, listId))\r\n  const { playerName, forceName, faction, supplyTotal, id, crusadeTotal } = list\r\n  const unitIds = useSelector((state) => selectFilteredUnitIds(state, listId))\r\n  const suffix = unitIds.length === 1 ? '' : 's';\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleDelete = () => {\r\n    dispatch(deleteManyUnits(unitIds))\r\n    dispatch(deleteList(id))\r\n  }\r\n  const loadList = () => {\r\n    dispatch(editList({ page: 'MAIN', currentListId: id }))\r\n  }\r\n\r\n  return (\r\n    <Card raised>\r\n      <Card.Content>\r\n        <Card.Header textAlign='left' content={forceName} />\r\n        <Card.Meta textAlign='left' content={playerName} />\r\n        <Card.Description textAlign='left'>{faction} Force</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content textAlign='left' extra>\r\n        <List>\r\n          <List.Item>\r\n            <Label>Power Rating:\r\n              <Label.Detail>{supplyTotal}</Label.Detail>\r\n            </Label>\r\n          </List.Item>\r\n          <List.Item>\r\n            <Label>Unit{suffix}\r\n              <Label.Detail>{unitIds.length}</Label.Detail>\r\n            </Label>\r\n          </List.Item>\r\n          <List.Item>\r\n            <Label>Crusade Points:\r\n              <Label.Detail>{crusadeTotal}</Label.Detail>\r\n            </Label>\r\n          </List.Item>\r\n        </List>\r\n      </Card.Content>\r\n      <Card.Content>\r\n        <Button.Group fluid widths='2'>\r\n          <Button icon='edit' content='Edit' onClick={loadList} />\r\n          <Popup\r\n            size='tiny'\r\n            position='top center'\r\n            on='click'\r\n            content={<Button size='small' compact negative onClick={handleDelete}>Confirm Delete</Button>}\r\n            trigger={<Button content='Delete' negative icon='delete' />} />\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CrusadeListDetails;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Header, Segment, Button, Card } from 'semantic-ui-react';\r\nimport { selectLists, saveList } from '../reducers/listsSlice';\r\nimport { editList, changePage } from '../reducers/pagesSlice';\r\nimport { v4 as uuid } from 'uuid'\r\nimport CrusadeListDetails from './crusadeListDetails';\r\n\r\nconst FrontPage = () => {\r\n  const dispatch = useDispatch()\r\n  const forcesList = useSelector(selectLists)\r\n  const id = uuid()\r\n\r\n  const newList = () => {\r\n    const newList = {\r\n      id,\r\n      supplyLimit: 50,\r\n      requisition: 5,\r\n      battlesFought: 0,\r\n      battlesWon: 0,\r\n      forceName: '',\r\n      playerName: '',\r\n      faction: '',\r\n      notes: '',\r\n    }\r\n    dispatch(saveList(newList))\r\n    dispatch(editList({ page: 'MAIN', currentListId: id }))\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <Segment>\r\n        <Header>Crusade Forces</Header>\r\n      </Segment>\r\n      {forcesList.length >= 1 && <Segment>\r\n        <Card.Group stackable itemsPerRow='4'>\r\n          {forcesList.map((list) => <CrusadeListDetails key={list.id} listId={list.id} />)}\r\n        </Card.Group>\r\n        </Segment>\r\n      }\r\n      <Button content='Add New Force' onClick={newList} />\r\n      <Button content='Battle Setup' onClick={() => dispatch(changePage('BATTLESETUP'))} />\r\n      <Button content='Battle History' onClick={() => dispatch(changePage('BATTLEHISTORY'))} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FrontPage\r\n\r\n","import { createSlice, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\r\nimport { selectListById } from './listsSlice';\r\n\r\nconst battlesAdapter = createEntityAdapter();\r\n\r\nconst initialState = battlesAdapter.getInitialState();\r\n\r\nconst battlesSlice = createSlice({\r\n  name: 'battles',\r\n  initialState,\r\n  reducers: {\r\n    saveBattle: battlesAdapter.upsertOne,\r\n    deleteBattle: battlesAdapter.removeOne,\r\n    deleteManyBattles: battlesAdapter.removeMany,\r\n  }\r\n})\r\n\r\nexport const { saveBattle, deleteBattle, deleteManyBattles } = battlesSlice.actions;\r\n\r\nexport default battlesSlice.reducer;\r\n\r\nexport const { selectAll: selectBattles, selectById: selectBattleById, } = battlesAdapter.getSelectors((state) => state.battles)\r\nexport const selectBattleIds = createSelector(\r\n  selectBattles, (battles) => battles.map((battle) => battle.id)\r\n);\r\n\r\nexport const selectBattlesByList = createSelector(\r\n  selectBattles, selectListById, (battle, list) => { return battle.filter((battle) => battle.list === list.id)}\r\n);\r\nexport const selectFilteredBattleIds = createSelector(\r\n  selectBattlesByList, (filteredBattles) => filteredBattles.map((battle) => battle.id)\r\n)","const MISSIONS = \r\n  {\r\n    combatPatrol: [\r\n      { text: 'Sweep and Clear', value: 'Sweep and Clear', reward: `The Victor can select 2 units from their army to be Marked for Greatness after the battle instead of the normal 1` },\r\n      { text: 'Supply Drop', value: 'Supply Drop', reward: `The Victor gains 2 Requisition Points after this battle instead of 1` },\r\n      { text: 'Assassinate', value: 'Assassinate', reward: `The Victor selects 1 unit to get a bonus Battle Trait of their choice (following all rules for Battle Honours)` }\r\n    ],\r\n    incursion: [\r\n      { text: 'Supply Cache', value: 'Supply Cache', reward: `The Victor gains 2 Requisition Points after this battle instead of 1` },\r\n      { text: 'The Relic', value: 'The Relic', reward: `The Victor selects 1 Character to get a bonus Crusade Relic of their choice (following all rules for Battle Honours)` },\r\n      { text: 'Sabotage', value: 'Sabotage', reward: `As Defender: Gain 1 free use of Increase Supply Limit and 1 free use of Rearm and Resupply requisitions. \\n As Attacker: The Victor selects 1 (non-character, non-vehicle, non-monster) unit to get a bonus Battle Trait of their choice (following all rules for Battle Honours) ` },\r\n      { text: 'Recon Patrol', value: 'Recon Patrol', reward: `The Victor can select 2 units from their army to be Marked for Greatness after the battle instead of the normal 1` },\r\n      { text: 'The Ritual', value: 'The Ritual', reward: `As Defender: Their Warlord gains 1 Battle Trait of their choice (or, if the Warlord is a Psyker, 1 Psychic Fortitude), following all normal rules for Battle Honours. \\n As Attacker: Select 1 unit to get a bonus Battle Trait of their choice (following all rules for Battle Honours)` },\r\n      { text: 'Behind Enemy Lines', value: 'Behind Enemy Lines', reward: `The Victor selects 1 unit that has exfiltrated from the battlefield to get 1 Battle Trait of their choice (following all rules for Battle Honours)` },\r\n    ],\r\n    strikeForce: [\r\n      { text: 'Supplies from Above', value: 'Supplies from Above', reward: `The Victor gains 2 Requisition Points after this battle instead of 1` },\r\n      { text: 'Narrow the Search', value: 'Narrow the Search', reward: `The Victor selects 1 unit to get a bonus Weapon Enhancement of their choice (following all rules for Battle Honours)` },\r\n      { text: 'Cut Off the Head', value: 'Cut Off the Head', reward: `The Victor selects 1 Character unit from their army to get a bonus Warlord Trait (following all rules for Battle Honours)` },\r\n      { text: 'Retrieval', value: 'Retrieval', reward: `As Defender: Add 1 new Character to their Order of Battle with a free Warlord Trait, Relic, or Specialist Reinforcement (Provided they have sufficient Supply and following all rules for Battle Honours). \\n As Attacker: Select 1 Character to get a bonus Crusade Relic of their choice (following all rules for Battle Honours)` },\r\n      { text: 'Raze and Ruin', value: 'Raze and Ruin', reward: `The Victor gains 2 free uses of Increase Supply Limit` },\r\n      { text: 'Ambush', value: 'Ambush', reward: `The Victor selects 1 unit to get a bonus Battle Trait of their choice (following all rules for Battle Honours)` }\r\n    ],\r\n    onslaught: [\r\n      { text: 'Firestorm', value: 'Firestorm', reward: `The Victor gains 2 Requisition Points after this battle instead of 1` },\r\n      { text: 'Grand Assault', value: 'Grand Assault', reward: `The Victor selects 1 unit to get a bonus Battle Trait of their choice (following all rules for Battle Honours)` },\r\n      { text: 'Field of Glory', value: 'Field of Glory', reward: `The Victor's Warlord gains 1 free Battle Honour of their choice (following all rules for Battle Honours)` }\r\n    ]\r\n  }\r\n\r\nexport default MISSIONS","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Form, Segment, Grid, List, Button, Header, Container, Checkbox, Message } from 'semantic-ui-react';\r\nimport { selectLists, updateList } from '../reducers/listsSlice';\r\nimport { selectUnits } from '../reducers/unitsSlice';\r\nimport { saveBattle } from '../reducers/battlesSlice';\r\nimport { resolveBattle, changePage } from '../reducers/pagesSlice';\r\nimport { v4 as uuid } from 'uuid';\r\nimport MISSIONS from '../constants/missions';\r\n\r\nconst style = {\r\n  paddingBottom: 10,\r\n  paddingTop: 10\r\n}\r\n\r\n\r\nconst BATTLESIZE = [\r\n  { text: 'Combat Patrol', value: 'combatPatrol', size: 25 },\r\n  { text: 'Incursion', value: 'incursion', size: 50 },\r\n  { text: 'Strike Force', value: 'strikeForce', size: 100 },\r\n  { text: 'Onslaught', value: 'onslaught', size: 150 }\r\n]\r\nconst DEFENDER = [\r\n  { text: 'Player One', value: 'playerOne' },\r\n  { text: 'Player Two', value: 'playerTwo' }\r\n]\r\n\r\nconst BattleSetup = () => {\r\n  const dispatch = useDispatch();\r\n  const allLists = useSelector(selectLists)\r\n  const allUnits = useSelector(selectUnits)\r\n  const [playerOneListName, setPlayerOneListName] = useState('')\r\n  const [playerOneListId, setPlayerOneListId] = useState('')\r\n  const [playerOneSelectedUnits, setPlayerOneSelectedUnits] = useState([])\r\n  const [playerOneVP, setPlayerOneVP] = useState('')\r\n  const [playerOneBattles, setPlayerOneBattles] = useState('')\r\n  const [playerOneWins, setPlayerOneWins] = useState('')\r\n  const [playerOneReq, setPlayerOneReq] = useState('')\r\n  const [playerTwoListId, setPlayerTwoListId] = useState('')\r\n  const [playerTwoListName, setPlayerTwoListName] = useState('')\r\n  const [playerTwoSelectedUnits, setPlayerTwoSelectedUnits] = useState([])\r\n  const [playerTwoVP, setPlayerTwoVP] = useState('')\r\n  const [playerTwoBattles, setPlayerTwoBattles] = useState('')\r\n  const [playerTwoWins, setPlayerTwoWins] = useState('')\r\n  const [playerTwoReq, setPlayerTwoReq] = useState('')\r\n  const [playerTwoTracked, setPlayerTwoTracked] = useState(false)\r\n  const [defender, setDefender] = useState('')\r\n  const [gameNotes, setGameNotes] = useState('')\r\n  const [mission, setMission] = useState('')\r\n  const [battleSize, setBattleSize] = useState('')\r\n  const [battleDate, setBattleDate] = useState('')\r\n  const [battleName, setBattleName] = useState('')\r\n  const [noUnits, setNoUnits] = useState(false)\r\n  const { size } = battleSize ? BATTLESIZE.find((battle) => battle.value === battleSize) : '0'\r\n  const { reward } = mission && battleSize ? MISSIONS[battleSize].find(({ value }) => value === mission) : ''\r\n  const playerOnePowerTotal = playerOneSelectedUnits.reduce((total, unit) => total + parseInt(unit.power), 0);\r\n  const playerTwoPowerTotal = playerTwoSelectedUnits.reduce((total, unit) => total + parseInt(unit.power), 0);\r\n  const winner = playerOneVP === playerTwoVP ? 'draw' : playerOneVP > playerTwoVP ? 'playerOne' : 'playerTwo'\r\n\r\n  const playerOneOptions = allLists.reduce(function (options, list) {\r\n    if (list.forceName !== playerTwoListName) {\r\n      options.push({ text: list.forceName, value: { forceName: list.forceName, id: list.id, battlesFought: list.battlesFought, wins: list.battlesWon, req: list.requisition }, key: list.id, content: (<Header content={list.forceName} subheader={list.playerName} />) });\r\n    } return options\r\n  }, [])\r\n  const playerTwoOptions = allLists.reduce(function (options, list) {\r\n    if (list.forceName !== playerOneListName) {\r\n      options.push({ text: list.forceName, value: { forceName: list.forceName, id: list.id, battlesFought: list.battlesFought, wins: list.battlesWon, req: list.requisition }, key: list.id, content: (<Header content={list.forceName} subheader={list.playerName} />) });\r\n    } return options\r\n  }, [])\r\n\r\n  const playerOneUnits = playerOneListId ? allUnits.filter((unit) => unit.list === playerOneListId) : []\r\n  const playerTwoUnits = playerTwoListId ? allUnits.filter((unit) => unit.list === playerTwoListId) : []\r\n\r\n\r\n  const setPlayer = (value) => {\r\n    setPlayerOneListName(value.forceName)\r\n    setPlayerOneListId(value.id)\r\n    setPlayerOneBattles(value.battlesFought)\r\n    setPlayerOneWins(value.wins)\r\n    setPlayerOneReq(value.req)\r\n  }\r\n  const setOpponent = (value) => {\r\n    setPlayerTwoListName(value.forceName)\r\n    setPlayerTwoListId(value.id)\r\n    setPlayerTwoBattles(value.battlesFought)\r\n    setPlayerTwoWins(value.wins)\r\n    setPlayerTwoReq(value.req)\r\n  }\r\n\r\n  const changeBattleSize = (value) => {\r\n    setMission('')\r\n    setBattleSize(value)\r\n  }\r\n\r\n  const playerTwoToggle = (checked) => {\r\n    if (checked) {\r\n      setPlayerTwoTracked(checked)\r\n    } else {\r\n      setPlayerTwoTracked(checked)\r\n      setPlayerTwoListId('')\r\n      setPlayerTwoListName('')\r\n      setPlayerTwoSelectedUnits([])\r\n    }\r\n  }\r\n\r\n  const reqRewardCheck = () => {\r\n    let reqReward\r\n    if (mission === 'Supply Drop' || mission === 'Supply Cache' || mission === 'Supplies from Above' || mission === 'Firestorm') {\r\n      reqReward = 2\r\n    } else {\r\n      reqReward = 1\r\n    } \r\n    return reqReward\r\n  }\r\n\r\n  const supplyRewardCheckOneTrack = () => {\r\n    if (mission === 'Raze and Ruin' && winner === 'playerOne') {\r\n      dispatch(updateList({id : playerOneListId, changes: { supplyRewards: 2 }}))\r\n    } else if (mission === 'Sabotage' && winner === 'playerOne' && winner === defender) {\r\n      dispatch(updateList({id : playerOneListId, changes: { supplyRewards: 1 }}))\r\n    }   \r\n  }\r\n  const supplyRewardCheckTwoTrack = () => {\r\n    if (mission === 'Raze and Ruin' && winner === 'playerOne') {\r\n      dispatch(updateList({id : playerOneListId, changes: { supplyRewards: 2 }}))\r\n    } else if (mission === 'Raze and Ruin' && winner === 'playerTwo') {\r\n      dispatch(updateList({id : playerTwoListId, changes: { supplyRewards: 2 }}))\r\n    } else if (mission === 'Sabotage' && winner === 'playerOne' && winner === defender) {\r\n      dispatch(updateList({id : playerOneListId, changes: { supplyRewards: 1 }}))\r\n    } else if (mission === 'Sabotage' && winner === 'playerTwo' && winner === defender) {\r\n      dispatch(updateList({id : playerTwoListId, changes: { supplyRewards: 1 }}))\r\n    }\r\n  }\r\n\r\n\r\n  const winnerUpdateOneTrack = () => {\r\n    if (winner === 'playerOne') {\r\n      dispatch(updateList({id : playerOneListId, changes: { battlesWon: playerOneWins + 1, battlesFought: playerOneBattles + 1, requisition: parseInt(playerOneReq) + reqRewardCheck()}}))\r\n     } else {\r\n      dispatch(updateList({id : playerOneListId, changes: { battlesFought: playerOneBattles + 1, requisition: parseInt(playerOneReq) + 1}}))\r\n    }\r\n  }\r\n  const winnerUpdateTwoTrack = () => {\r\n    if (winner === 'playerOne') {\r\n      dispatch(updateList({id : playerOneListId, changes: { battlesWon: playerOneWins + 1, battlesFought: playerOneBattles + 1, requisition: parseInt(playerOneReq) + reqRewardCheck()}}))\r\n      dispatch(updateList({id : playerTwoListId, changes: { battlesFought: playerTwoBattles + 1, requisition: parseInt(playerTwoReq) + 1}}))\r\n    } else if (winner === 'playerTwo') {\r\n      dispatch(updateList({id : playerTwoListId, changes: { battlesWon: playerTwoWins + 1, battlesFought: playerTwoBattles + 1, requisition: parseInt(playerTwoReq) + reqRewardCheck()}}))\r\n      dispatch(updateList({id : playerOneListId, changes: { battlesFought: playerOneBattles + 1, requisition: parseInt(playerOneReq) + 1}}))\r\n    } else if (winner === 'draw') {\r\n    dispatch(updateList({id : playerOneListId, changes: { battlesFought: playerOneBattles + 1, requisition: parseInt(playerOneReq) + 1}}))\r\n    dispatch(updateList({id : playerTwoListId, changes: { battlesFought: playerTwoBattles + 1, requisition: parseInt(playerTwoReq) + 1}}))\r\n    }\r\n  }\r\n\r\n  const requirementCheck = () => {\r\n    if (playerTwoTracked && (playerOneSelectedUnits.length === 0  || playerTwoSelectedUnits.length === 0)) {\r\n      setNoUnits(true)\r\n    } else if (playerOneSelectedUnits.length === 0) {\r\n      setNoUnits(true)\r\n    } else {\r\n      recordBattle()\r\n    }\r\n  }\r\n\r\n  const recordBattle = () => {\r\n    if (playerTwoTracked) {\r\n      const battle = {\r\n        id: uuid(),\r\n        playerTwoTracked,\r\n        mission,\r\n        battleSize,\r\n        playerOneListName,\r\n        playerOneListId,\r\n        playerOneSelectedUnits,\r\n        playerOneVP,\r\n        playerTwoListName,\r\n        playerTwoListId,\r\n        playerTwoSelectedUnits,\r\n        playerTwoVP,\r\n        battleDate,\r\n        winner,\r\n        defender,\r\n        battleName,\r\n        gameNotes,\r\n      };\r\n      winnerUpdateTwoTrack()\r\n      supplyRewardCheckTwoTrack()\r\n      dispatch(saveBattle(battle))\r\n      dispatch(resolveBattle({ page: 'BATTLERES', battle: battle.id}))\r\n    } else {\r\n      const battle = {\r\n        id: uuid(),\r\n        playerTwoTracked,\r\n        mission,\r\n        battleSize,\r\n        playerOneListName,\r\n        playerOneListId,\r\n        playerOneSelectedUnits,\r\n        playerOneVP,\r\n        playerTwoVP,\r\n        battleDate,\r\n        winner,\r\n        defender,\r\n        battleName,\r\n        gameNotes,\r\n      };\r\n      winnerUpdateOneTrack()\r\n      supplyRewardCheckOneTrack()\r\n      dispatch(saveBattle(battle))\r\n      dispatch(resolveBattle({ page: 'BATTLERES', battle: battle.id}))\r\n    }\r\n  }\r\n\r\n  const checkPlayerOneUnits = (checked, unit) => {\r\n    if (checked) {\r\n      setPlayerOneSelectedUnits([...playerOneSelectedUnits, unit])\r\n    } else {\r\n      setPlayerOneSelectedUnits(playerOneSelectedUnits.filter((toKeep) => toKeep !== unit))\r\n    }\r\n  }\r\n  const checkPlayerTwoUnits = (checked, unit) => {\r\n    if (checked) {\r\n      setPlayerTwoSelectedUnits([...playerTwoSelectedUnits, unit])\r\n    } else {\r\n      setPlayerTwoSelectedUnits(playerTwoSelectedUnits.filter((toKeep) => toKeep !== unit))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {noUnits && <Message warning onDismiss={() => setNoUnits(false)} content='Please ensure you have selected units'/>}\r\n      <Segment>\r\n        <Form onSubmit={e => e.preventDefault()}>\r\n         <Form.Input required fluid label='Battle Name' onChange={e => setBattleName(e.target.value)} placeholder='e.g., \"The Battle for Holy Terra\"'/>\r\n          <Form.Radio toggle label='Track Both Forces' value={playerTwoTracked} onChange={(e, { checked }) => playerTwoToggle(checked)} />\r\n          <Form.Group widths='equal'>\r\n            <Form.Select required clearable options={playerOneOptions} label=\"Player One Force\" fluid onChange={(e, { value }) => setPlayer(value)} />\r\n            {playerTwoTracked && <Form.Select clearable options={playerTwoOptions} label=\"Player Two Force\" fluid onChange={(e, { value }) => setOpponent(value)} />}\r\n          </Form.Group>\r\n          <Form.Group widths='equal'>\r\n            <Form.Select required fluid label='Battle Size' clearable options={BATTLESIZE} onChange={(e, { value }) => changeBattleSize(value)} />\r\n            <Form.Select required fluid label='Mission' clearable options={MISSIONS[battleSize]} onChange={(e, { value }) => setMission(value)} />\r\n          </Form.Group>\r\n          <Form.Group widths='equal'>\r\n          <Form.Select required fluid label='Defender' clearable options={DEFENDER} onChange={(e, { value }) => setDefender(value)} />\r\n          <Form.Input required fluid type='date' label='Battle Date' onChange={e => setBattleDate(e.target.value)}/>\r\n          </Form.Group>\r\n        </Form>\r\n        <Container text style={style}>\r\n          <Header content='Mission Rewards'/>\r\n          <p className='messageText lineBreak'>{reward}</p>\r\n        </Container>        \r\n      </Segment>\r\n      <Segment>\r\n        <Header>{playerTwoTracked ? 'Army Rosters' : 'Army Roster'}</Header>\r\n        <Grid stackable>\r\n          <Grid.Row centered columns='equal'>\r\n            <Grid.Column>\r\n              <Segment>\r\n                {playerOneListName && <Header textAlign='center' color={playerOnePowerTotal > size ? 'red' : 'black'}>{playerOneListName}\r\n                  <Header.Subheader color={playerOnePowerTotal > size ? 'red' : 'black'} textAlign='center' as='h4'>Power Total: {playerOnePowerTotal} \\ {size ? size : 0}</Header.Subheader>\r\n                </Header>}\r\n                <List divided>\r\n                  {playerOneUnits.map((unit) =>\r\n                    <List.Item id={unit.id} key={unit.id}>\r\n                      <List.Content floated='right'>\r\n                        <Checkbox onClick={(e, { checked }) => checkPlayerOneUnits(checked, unit)} toggle/>\r\n                      </List.Content>\r\n                      <List.Content>\r\n                        <List.Header>{unit.name}</List.Header>\r\n                        <List.Description>Type: {unit.type} - Role: {unit.role} - Power Rating: {unit.power}</List.Description>\r\n                      </List.Content>\r\n                    </List.Item>)}\r\n                </List>\r\n              </Segment>\r\n            </Grid.Column>\r\n            {playerTwoTracked && <Grid.Column>\r\n              <Segment>\r\n                {playerTwoListName && <Header textAlign='center' color={playerTwoPowerTotal > size ? 'red' : 'black'}>{playerTwoListName}\r\n                  <Header.Subheader color={playerTwoPowerTotal > size ? 'red' : 'black'} textAlign='center' as='h4'>Power Total: {playerTwoPowerTotal} \\ {size ? size : 0}</Header.Subheader>\r\n                </Header>}\r\n                <List divided>\r\n                  {playerTwoUnits.map((unit) =>\r\n                    <List.Item id={unit.id}>\r\n                      <List.Content floated='right'>\r\n                        <Checkbox onClick={(e, { checked }) => checkPlayerTwoUnits(checked, unit)} toggle/>\r\n                      </List.Content>\r\n                      <List.Content>\r\n                        <List.Header>{unit.name}</List.Header>\r\n                        <List.Description>Type: {unit.type} - Role: {unit.role} - Power Rating: {unit.power}</List.Description>\r\n                      </List.Content>\r\n                    </List.Item>)}\r\n                </List>\r\n              </Segment>\r\n            </Grid.Column>}\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment>\r\n      <Segment>\r\n        <Form onSubmit={e => e.preventDefault()}>\r\n          <Form.Group widths='equal'>\r\n            <Form.Input required label='Player One Victory Points' min='0' max='100' type='number' value={playerOneVP} onChange={e => setPlayerOneVP(e.target.value)} />\r\n            <Form.Input required label='Player Two Victory Points' min='0' max='100' type='number' value={playerTwoVP} onChange={e => setPlayerTwoVP(e.target.value)}/>\r\n          </Form.Group>\r\n          <Form.TextArea label='Game Notes' placeholder='Add any extra notes about the game here' value={gameNotes} onChange={e => setGameNotes(e.target.value)} />\r\n        </Form>\r\n      </Segment>\r\n      <Button content='Back' onClick={() => dispatch(changePage('FRONT'))} />\r\n      <Button positive content='Record Battle' onClick={requirementCheck} />     \r\n    </>\r\n  )\r\n}\r\n\r\nexport default BattleSetup","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Form, Card, Button, List } from 'semantic-ui-react';\r\nimport { updateUnit } from '../reducers/unitsSlice';\r\n\r\nconst UnitBattleListing = ({ unit }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { name, type, xp, battlesFought, battlesSurvived, enemiesDestroyed, id } = unit\r\n  const [xpGain, setXPGain] = useState(0)\r\n  const [newEnemies, setNewEnemies] = useState(0)\r\n  const [destroyed, setDestroyed] = useState(false);\r\n  const [marked, setMarked] = useState(false);\r\n  const [visible, setVisible] = useState(true)\r\n  const enemyXP = Math.floor((parseInt(newEnemies) + parseInt(enemiesDestroyed)) / 3) - Math.floor(parseInt(enemiesDestroyed) / 3)\r\n\r\n  const calculateXPGain = () => {\r\n    let totalXPGain = 1\r\n    if (destroyed) {\r\n      totalXPGain = 0 + parseInt(xpGain);\r\n    } else if (marked) {\r\n      totalXPGain += 3 + parseInt(xpGain) + enemyXP;\r\n    } else {\r\n      totalXPGain += parseInt(xpGain) + enemyXP;\r\n    } return totalXPGain;\r\n  };\r\n\r\n  const saveUnit = () => {\r\n    dispatch(updateUnit({\r\n      id: id, \r\n      changes: \r\n        { xp: parseInt(xp) + calculateXPGain(),\r\n          battlesFought: parseInt(battlesFought) + 1,\r\n          battlesSurvived: destroyed ? battlesSurvived : parseInt(battlesSurvived) + 1,\r\n          enemiesDestroyed: parseInt(enemiesDestroyed) + parseInt(newEnemies)}\r\n        }))\r\n     setVisible(!visible)   \r\n  }\r\n\r\n  return (\r\n    <>\r\n    {visible ? <Card raised>\r\n      <Card.Content>\r\n        <Card.Header content={name} />\r\n        <Card.Description>{type}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Input label='Enemies Destroyed' value={newEnemies} type='number' min='0' max='100' onChange={e => setNewEnemies(e.target.value)} />\r\n            <Form.Input label={destroyed ? 'XP Lost from Devastating Blow' : 'XP Earned in Battle'} value={xpGain} type='number' min={!destroyed ? '0' : '-6'} max={destroyed ? '0' : '100'} onChange={e => setXPGain(e.target.value)} />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Checkbox label='Unit Destroyed?' onChange={(e, { checked }) => setDestroyed(checked)} />\r\n            <Form.Checkbox label='Marked for Greatness' onChange={(e, { checked }) => setMarked(checked)} />\r\n          </Form.Group>\r\n        </Form>\r\n      </Card.Content>\r\n      <Card.Content>\r\n        <List>\r\n          <List.Item>\r\n            <strong>Current XP</strong>: {xp}\r\n          </List.Item>\r\n          <List.Item>\r\n            <strong>XP Gain</strong>: {calculateXPGain()}\r\n          </List.Item>\r\n          <List.Item>\r\n            <strong>Existing Kill Count</strong>: {enemiesDestroyed}\r\n          </List.Item>\r\n        </List>\r\n      </Card.Content>\r\n      <Card.Content><Button fluid content='Save Unit' onClick={() => saveUnit()} /></Card.Content>\r\n    </Card> : <Card><Card.Content><Card.Header>Unit Saved</Card.Header></Card.Content></Card>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UnitBattleListing;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Segment, Header, Button, Card } from 'semantic-ui-react';\r\nimport { selectBattleById } from '../reducers/battlesSlice';\r\nimport { changePage } from '../reducers/pagesSlice';\r\nimport UnitBattleListing from './battleUnitListing';\r\nconst style = {\r\n  paddingBottom: 10\r\n}\r\n\r\n\r\nconst BattleResolution = ({ battleId }) => {\r\n  const dispatch = useDispatch();\r\n  const currentBattle = useSelector((state) => selectBattleById(state, battleId))\r\n\r\n  const returnToFront = () => {\r\n    dispatch(changePage('FRONT'))\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n      <Segment textAlign='left'>\r\n        {currentBattle.playerTwoTracked && <Header content='Player One Units' />}\r\n        <Card.Group stackable style={style} itemsPerRow='4'>\r\n          {currentBattle.playerOneSelectedUnits.map((unit) => <UnitBattleListing unit={unit} key={unit.id} />)}\r\n        </Card.Group>\r\n      </Segment>\r\n      {currentBattle.playerTwoTracked &&\r\n        <Segment textAlign='left'>\r\n          <Header content='Player Two Units'/>\r\n          <Card.Group stackable style={style} itemsPerRow='4'>\r\n            {currentBattle.playerTwoSelectedUnits.map((unit) => <UnitBattleListing unit={unit} key={unit.id} />)}\r\n          </Card.Group>\r\n        </Segment>}\r\n        <Button content='Finalise Battle' onClick={returnToFront}/>        \r\n    </>\r\n  )\r\n}\r\n\r\nexport default BattleResolution","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card, Header, Image, Grid, Container } from 'semantic-ui-react';\r\nimport { selectListById } from '../reducers/listsSlice';\r\nimport { startCase } from 'lodash'\r\n\r\nconst image = require(`../svgs/swords.svg`).default\r\n\r\nconst BattleHistoryListing = ({battle}) => {\r\n  const playerOneList = useSelector((state) => selectListById(state, battle.playerOneListId))\r\n  const playerTwoList = useSelector((state) => selectListById(state, battle.playerTwoListId))\r\n\r\n  return (\r\n    <Card raised>\r\n          <Card.Content>\r\n            <Card.Header>{battle.battleName}</Card.Header>\r\n            <Card.Meta>{battle.battleDate}</Card.Meta>\r\n          </Card.Content>\r\n          <Card.Content>\r\n            <Grid>\r\n              <Grid.Row columns='equal' verticalAlign='middle'>\r\n                <Grid.Column>\r\n                  <Header content={battle.playerOneListName} subheader={playerOneList ? playerOneList.playerName : ''} />\r\n                  <p>{playerOneList ? playerOneList.faction : ''}</p>\r\n                </Grid.Column>\r\n                <Grid.Column><Image src={image} size='mini' /></Grid.Column>\r\n                <Grid.Column>\r\n                  <Header>{battle.playerTwoTracked ? battle.playerTwoListName : 'Unknown Foe'}\r\n                  <Header.Subheader>{battle.playerTwoTracked && playerTwoList ? playerTwoList.playerName : ''}</Header.Subheader></Header>\r\n                  <p>{battle.playerTwoTracked && playerTwoList ? playerTwoList.faction : ''}</p>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Card.Content>\r\n          <Card.Content>\r\n            <Grid>\r\n              <Grid.Row columns='equal' verticalAlign='top'>\r\n                <Grid.Column>\r\n                  <Header>Battle Size</Header>\r\n                  <p>{startCase(battle.battleSize)}</p>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Header>Mission</Header>\r\n                  <p>{battle.mission}</p>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Header>Victor</Header>\r\n                  <p>{battle.winner === 'playerOne' ? battle.playerOneListName : battle.playerTwoListName}</p>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row columns='equal'>\r\n                <Grid.Column>\r\n                  <Header>{battle.playerOneListName} Victory Points</Header>\r\n                  <p>{battle.playerOneVP}</p>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Header>{battle.playerTwoTracked ? battle.playerTwoListName : 'Unknown Foe'} Victory Points</Header>\r\n                  <p>{battle.playerTwoVP}</p>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row>\r\n                <Container text>\r\n                  <p>{battle.gameNotes}</p>\r\n                </Container>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Card.Content>\r\n        </Card>\r\n  )\r\n}\r\n\r\nexport default BattleHistoryListing","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card, Button, Segment } from 'semantic-ui-react';\r\nimport { selectBattles } from '../reducers/battlesSlice';\r\nimport { changePage } from '../reducers/pagesSlice';\r\nimport BattleHistoryListing from './battleHistoryListing';\r\n\r\nconst style = {\r\n  paddingBottom: 10\r\n}\r\n\r\n\r\nconst BattleHistory = () => {\r\n  const dispatch = useDispatch()\r\n  const battles = useSelector(selectBattles)\r\n\r\n  return (\r\n    <Segment>\r\n      <Card.Group stackable itemsPerRow={2} style={style}>\r\n        {battles.map(battle => <BattleHistoryListing key={battle.id} battle={battle}/>)}\r\n      </Card.Group>\r\n      <Button content='Back' onClick={() => dispatch(changePage('FRONT'))}/>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default BattleHistory\r\n","const HELP = {\r\n  'FRONT': {title: `Warhammer 40,000 Crusade Tracker`, content: `Each page has a help message like this one that can be minimised. \\n This page shows all Crusade Forces you have created. You can click \"Add New Force\" to create a new one. \\n The Battle Setup button takes you to the Battle Setup allowing you to track any battles that your Forces have fought. \\n The Battle History button takes you to a log of Battles fought.`},\r\n  'MAIN': {title: `Crusade Force`, content: `Enter your Crusade Force details here. Changes to Crusade Forces are saved automatically. All information is saved in your browser local storage (meaning you can refresh the page and it will remain) \\n Use the Requisition Log to enter requisitions that your Crusade Force has used. Currently this is done manually because of the large number of requisitions that exist in the rules and various codices. \\n Your Crusade Units will appear as cards with some details and they can be expanded to show more.`},\r\n  'ADD': {title: `Add a Unit`, content: `Enter the details of a unit here. \\n This page allows for pre-existing units to be added to a Force (i.e., if you are converting a Force tracked elsewhere) however any battles they have fought will not be tracked. \\n The Unit Name, Type, Role, and Power Rating are required fields. \\n Rank is automatically adjusted based on Experience Points and will be updated after battles.`},\r\n  'BATTLESETUP': {title: `Battle Setup`, content: `This page contains the setup for a battle. If both player's Crusade Forces are tracked using this site, you can use the toggle to include them both in the battle. \\n Mission rewards that grant additional Requisition are added automatically, and rewards that grant free uses of Increase Supply Limit can be claimed on the Crusade Force page. All others need to be manually added. \\n When you select your Crusade Force a list of units will appear in the Army Roster section. Check the box next to the unit to add it to the battle. Updating their Crusade Cards happens on the next page.`},\r\n  'BATTLERES': {title: `Battle Resolution`, content: `All units listed below will gain 1XP for participating in the battle. The XP gain from destroying enemies will be also be calculated based on the number entered. \\n Enter any additional XP gains from Agendas or other bonuses in the XP field. If a unit is destroyed during the battle check that checkbox, and if they recieve a Devastating Blow as a result, enter the XP loss in this field. \\n If a unit is Marked for Greatness check the box and the bonus XP will be added. \\n Currently each unit must be individually saved before clicking Finalise Battle` },\r\n  'EDIT': {title: `Edit a Unit`, content: `You can edit an existing unit. Adding Relics, Traits, or Specialist Reinforcements to an existing unit will not cost Requisition Points. These must be added in the Requisition Log.`},\r\n  'BATTLEHISTORY': {title: `Battle History`, content: `Below is a list of Battles fought`}\r\n}\r\n\r\nexport default HELP","import './App.css';\nimport React from 'react';\nimport { Header, Container, Accordion, Icon } from 'semantic-ui-react';\nimport ForceHeader from './components/forceHeader';\nimport UnitCard from './components/unitCard';\nimport OrderOfBattle from './components/orderOfBattle';\nimport FrontPage from './components/frontPage';\nimport BattleSetup from './components/battleSetup';\nimport BattleResolution from './components/battleResolution';\nimport BattleHistory from './components/battleHistory';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleHelp } from './reducers/pagesSlice';\nimport HELP from './constants/help';\n\nconst App = () => {\n  const dispatch = useDispatch()\n  const navTo = useSelector((state) => state.pages)\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Header inverted as='h1'>Crusade Tracker</Header>\n      </div>\n      <Container>\n        <Accordion styled fluid>\n          <Accordion.Title\n          active={navTo.help}\n          onClick={() => dispatch(toggleHelp())}>\n            <Icon name='dropdown' />\n            {HELP[navTo.page].title}\n          </Accordion.Title>\n          <Accordion.Content \n          active={navTo.help}\n          className='lineBreak messageText'>\n            {HELP[navTo.page].content}\n          </Accordion.Content>\n        </Accordion>\n        {(() => {\n          switch (navTo.page) {\n            case 'FRONT':\n              return <FrontPage />\n            case 'MAIN':\n              return <><ForceHeader listId={navTo.currentListId} /><OrderOfBattle /></>;\n            case 'ADD':\n              return <UnitCard />;\n            case 'BATTLESETUP':\n              return <BattleSetup />;\n            case 'BATTLERES':\n              return <BattleResolution battleId={navTo.battle}/>;\n            case 'BATTLEHISTORY':\n              return <BattleHistory />;\n            case 'EDIT':\n              return <UnitCard unitId={navTo.editId} />; \n            default:\n              return null;\n          }\n        })()}\n      </Container>\n    </div>\n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport thunk from 'redux-thunk';\r\nimport unitsSlice from './reducers/unitsSlice';\r\nimport listsSlice from './reducers/listsSlice';\r\nimport pagesSlice from './reducers/pagesSlice';\r\nimport requisitionsSlice from './reducers/requisitionsSlice';\r\nimport battlesSlice from './reducers/battlesSlice';\r\n\r\nconst reducers = combineReducers({\r\n  units: unitsSlice,\r\n  lists: listsSlice,\r\n  pages: pagesSlice,\r\n  requisitions: requisitionsSlice,\r\n  battles: battlesSlice,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers)\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: true,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk)\r\n});\r\n\r\nexport default store","import React from 'react';\nimport { render } from 'react-dom';\nimport 'semantic-ui-css/semantic.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './configureStore';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistStore } from 'redux-persist';\n\nlet persistor = persistStore(store)\n\nconst renderApp = () =>\n  render(\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor} >\n        <App />\n      </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n  );\n\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n  module.hot.accept('./App', renderApp)\n}\n\nrenderApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}